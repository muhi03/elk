import{x as c,i as w,aa as p,aw as y,c as b,an as g,s as k,cD as x}from"./vIUoIwJY.js";const i=g({});function H(){const t=c.value?.account.id,{client:s,streamingClient:r}=w();async function f(){if(!t||!i[t])return;const n=i[t][1][0];i[t][1]=[],n&&await s.value.v1.markers.create({notifications:{lastReadId:n}})}async function l(n,o){for await(const a of n)a.event==="notification"&&i[o]&&i[o][1].unshift(a.payload.id)}async function d(){if(!k.value||!t||i[t]!==void 0||!c.value?.token)return;let n;const o=new Promise(e=>n=e);i[t]=[o,[]],await x(r).toBeTruthy();const a=r.value.user.subscribe();n(a),l(a,t);const m=await s.value.v1.markers.fetch({timeline:["notifications"]}),h=s.value.v1.notifications.list({limit:30});do{const e=await h.next();if(!e.done&&e.value.length)for(const u of e.value){if(u.id===m.notifications.lastReadId)return;i[t][1].push(u.id)}else break}while(!0)}function v(){!t||!i[t]||(i[t][0].then(n=>n.unsubscribe()),i[t]=void 0)}return p(c,v),y(()=>{d()}),{notifications:b(()=>t?i[t]?.[1].length??0:0),clearNotifications:f}}export{H as u};
